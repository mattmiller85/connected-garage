[{"/Users/matt/Code/connected-garage/connected-garage-web/src/index.tsx":"1","/Users/matt/Code/connected-garage/connected-garage-web/src/reportWebVitals.ts":"2","/Users/matt/Code/connected-garage/connected-garage-web/src/App.tsx":"3","/Users/matt/Code/connected-garage/connected-garage-web/src/Openers.tsx":"4","/Users/matt/Code/connected-garage/connected-garage-web/src/config.ts":"5"},{"size":1164,"mtime":1610471193278,"results":"6","hashOfConfig":"7"},{"size":425,"mtime":1608577642594,"results":"8","hashOfConfig":"7"},{"size":3111,"mtime":1610473347629,"results":"9","hashOfConfig":"7"},{"size":5117,"mtime":1610471051802,"results":"10","hashOfConfig":"7"},{"size":648,"mtime":1608670777958,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"g78pg6",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"/Users/matt/Code/connected-garage/connected-garage-web/src/index.tsx",[],["24","25"],"/Users/matt/Code/connected-garage/connected-garage-web/src/reportWebVitals.ts",[],"/Users/matt/Code/connected-garage/connected-garage-web/src/App.tsx",["26","27","28","29"],"/Users/matt/Code/connected-garage/connected-garage-web/src/Openers.tsx",["30"],"import Amplify, { API, Auth } from \"aws-amplify\";\nimport React, { ReactNode } from \"react\";\n\nimport { format } from 'date-fns'\n\nimport { config as getconfig } from './config';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faDoorOpen, faDoorClosed } from '@fortawesome/free-solid-svg-icons';\n\nconst config = getconfig();\n\nconst socketUrl = config.socketUrl;\n\nclass Openers extends React.Component<{}, { doorState: any, buttonState: any, consoleMessage: string, username: string }> {\n  private ws: WebSocket | undefined;\n\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      doorState: {\n        left: {},\n        middle: {},\n        right: {}\n      },\n      buttonState: {\n        left: { disabled: false },\n        middle: { disabled: false },\n        right: { disabled: false }\n      },\n      consoleMessage: '',\n      username: ''\n    };\n\n  }\n\n  async openClose(which_door: string) {\n    const { buttonState, doorState } = this.state;\n    buttonState[which_door].disabled = true;\n\n    await API.post('api', '/message/5447bb99-4bef-4a27-86e3-f2cd6b0b98b0', {\n      body: {\n        message_type: 'toggle',\n        payload: { which_door }\n      }\n    });\n    \n    if (doorState[which_door].is_open) {\n      doorState[which_door].closing = true;\n      doorState[which_door].opening = false;\n    } else {\n      doorState[which_door].closing = false;\n      doorState[which_door].opening = true;\n    }\n    console.log('Toggling door.');\n\n    \n    this.setState({\n      buttonState,\n      doorState\n    });\n  }\n\n  async getStatus() {\n    const response = await API.get('api', '/status/5447bb99-4bef-4a27-86e3-f2cd6b0b98b0', undefined);\n    const payload = response;\n    return payload;\n  }\n\n  connect() {\n\n    this.ws = new WebSocket(socketUrl);\n    this.ws.onopen = () => {\n      this.setState({\n        consoleMessage: `Connected for updates: ${format(new Date(), 'MMMM do, yyyy H:mm')}`\n      });\n    };\n    this.ws.onmessage = (e) => {\n      console.log(JSON.stringify(e, undefined, 1));\n      const message = JSON.parse(e.data);\n\n      if (message.message_type === 'door_status') {\n        const doorState = message.payload;\n        const { buttonState } = this.state;\n\n        buttonState.left.disabled = false;\n        buttonState.right.disabled = false;\n        buttonState.middle.disabled = false;\n\n        this.setState({\n          doorState,\n          buttonState,\n          consoleMessage: `Updated door status: ${format(new Date(), 'MMMM do, yyyy H:mm')}`\n        });\n      }\n    };\n\n    this.ws.onclose = (e) => {\n      this.setState({\n        consoleMessage: `Connection lost, reconnecting: ${format(new Date(), 'MMMM do, yyyy H:mm')}`\n      });\n      console.log('Socket is closed. Reconnect will be attempted in 1 second.', e.reason);\n      setTimeout(() => {\n        this.connect();\n      }, 1000);\n    };\n  \n    this.ws.onerror = (err: any) => {\n      console.error('Socket encountered error: ', err.message, 'Closing socket');\n      this.ws?.close();\n    };\n  }\n\n  async initialize() {\n    const user = await Auth.currentAuthenticatedUser();\n    const { buttonState } = this.state;\n\n    buttonState.left.disabled = false;\n    buttonState.right.disabled = false;\n    buttonState.middle.disabled = false;\n\n    this.setState({\n      doorState: await this.getStatus(),\n      consoleMessage: `Updated door status: ${format(new Date(), 'MMMM do, yyyy H:mm')}`,\n      username: user.getUsername()\n    });\n\n    this.connect();\n  }\n\n  async componentDidMount() {\n    await this.initialize();\n  }\n\n\n  render(): ReactNode {\n    const { doorState, buttonState } = this.state;\n    const doorDisplays = {\n      left: { icon: doorState.left.is_open ? faDoorOpen : faDoorClosed, text: doorState.left.is_open ? 'Open' : 'Closed' },\n      middle: { icon: doorState.middle.is_open ? faDoorOpen : faDoorClosed, text: doorState.middle.is_open ? 'Open' : 'Closed' },\n      right: { icon: doorState.right.is_open ? faDoorOpen : faDoorClosed, text: doorState.right.is_open ? 'Open' : 'Closed' },\n    }\n    return (\n      <div className=\"container\">\n          <div className=\"columns\">\n              <div className=\"column\">\n                <button disabled={buttonState.left.disabled} className=\"button\" aria-label={doorDisplays.left.text} onClick={() => this.openClose('left') } >Left Door \n                  <FontAwesomeIcon icon={doorDisplays.left.icon} /></button>\n              </div>\n              <div className=\"column\">\n                <button disabled={buttonState.middle.disabled} className=\"button\" aria-label={doorDisplays.middle.text} onClick={() => this.openClose('middle') }>Middle Door \n                  <FontAwesomeIcon icon={doorDisplays.middle.icon} /></button>\n              </div>\n              <div className=\"column\">\n                <button disabled={buttonState.right.disabled} className=\"button\" aria-label={doorDisplays.right.text} onClick={() => this.openClose('right') }>Right Door \n                  <FontAwesomeIcon icon={doorDisplays.right.icon} /></button>\n              </div>\n          </div>\n      </div>\n    )\n  }\n}\n\nexport default Openers;","/Users/matt/Code/connected-garage/connected-garage-web/src/config.ts",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":13,"column":3,"nodeType":"37","messageId":"38","endLine":13,"endColumn":7},{"ruleId":"39","severity":1,"message":"40","line":45,"column":15,"nodeType":"41","endLine":45,"endColumn":104},{"ruleId":"42","severity":1,"message":"43","line":48,"column":13,"nodeType":"41","endLine":51,"endColumn":88},{"ruleId":"42","severity":1,"message":"43","line":76,"column":19,"nodeType":"41","endLine":76,"endColumn":84},{"ruleId":"35","severity":1,"message":"44","line":1,"column":8,"nodeType":"37","messageId":"38","endLine":1,"endColumn":15},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"@typescript-eslint/no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'Amplify' is defined but never used.","no-global-assign","no-unsafe-negation"]